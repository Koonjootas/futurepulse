import os
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DRAFT_CHAT_ID = os.getenv("DRAFT_CHAT_ID")           # –ü—Ä–∏–º–µ—Ä: -1002850405883
MAIN_CHANNEL_ID = os.getenv("MAIN_CHANNEL_ID")       # –ü—Ä–∏–º–µ—Ä: @FuturePulse

# –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–∑ –ø–∞–ø–∫–∏ posts/
POSTS_DIR = "posts"
SENT_LOG = "sent_posts.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
if os.path.exists(SENT_LOG):
    with open(SENT_LOG, "r", encoding="utf-8") as f:
        sent_files = set(json.load(f))
else:
    sent_files = set()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
def build_keyboard(filename):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish|{filename}"),
         InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete|{filename}")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
@dp.message_handler(commands=["send_posts"])
async def send_posts(message: types.Message):
    files = sorted(os.listdir(POSTS_DIR))
    new_files = [f for f in files if f not in sent_files and f.endswith(".txt")]

    if not new_files:
        await message.reply("–í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    for filename in new_files:
        path = os.path.join(POSTS_DIR, filename)
        with open(path, "r", encoding="utf-8") as f:
            content = f.read()

        msg = await bot.send_message(
            chat_id=DRAFT_CHAT_ID,
            text=content,
            reply_markup=build_keyboard(filename),
            parse_mode="Markdown"
        )
        sent_files.add(filename)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {filename}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
    with open(SENT_LOG, "w", encoding="utf-8") as f:
        json.dump(list(sent_files), f)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith("publish") or c.data.startswith("delete"))
async def handle_action(callback: types.CallbackQuery):
    action, filename = callback.data.split("|")
    path = os.path.join(POSTS_DIR, filename)

    if action == "publish":
        with open(path, "r", encoding="utf-8") as f:
            content = f.read()
        await bot.send_message(chat_id=MAIN_CHANNEL_ID, text=content, parse_mode="Markdown")
        await callback.message.edit_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:\n\n{content}")
        logging.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {filename}")

    elif action == "delete":
        if os.path.exists(path):
            os.remove(path)
        await callback.message.edit_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {filename}")
        logging.info(f"üóë –£–¥–∞–ª–µ–Ω–æ: {filename}")

    await callback.answer()

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ /send_posts —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    executor.start_polling(dp, skip_updates=True)
